{"version":3,"sources":["webpack://test_webpack/./src/controller.js","webpack://test_webpack/./src/helpers.js","webpack://test_webpack/./src/model.js","webpack://test_webpack/./src/view.js","webpack://test_webpack/webpack/bootstrap","webpack://test_webpack/webpack/runtime/define property getters","webpack://test_webpack/webpack/runtime/hasOwnProperty shorthand","webpack://test_webpack/webpack/runtime/make namespace object","webpack://test_webpack/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,eAAe,cAAc;AAC7B,6CAA6C,UAAU;;AAEvD;AACA;;AAEA,YAAY,UAAU;AACtB,4CAA4C,MAAM;;AAElD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;;ACnD1B;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;AC1D6C;;AAE7C,oBAAoB,kDAAY;AAChC;AACA;;AAEA;AACA,G;;AAEA,e;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;AAMA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iEAAe,KAAK,E;;;;;;;;;;;;;;;AClDE;;AAEtB,mBAAmB,qDAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;AACA,qBAAqB,0DAAa;AAClC;AACA;AACA;AACA,KAAK;AACL,kBAAkB,0DAAa;AAC/B;AACA,KAAK;AACL,sBAAsB,0DAAa;AACnC;AACA;AACA,KAAK;AACL,uBAAuB,0DAAa;AACpC;AACA,KAAK;AACL,yBAAyB,0DAAa;AACtC;AACA,KAAK;AACL,iBAAiB,0DAAa;AAC9B,+BAA+B,oCAAoC;AACnE;AACA,OAAO;AACP;;;;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;;AAGA;AACA,gDAAgD,GAAG;AACnD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA,iEAAe,IAAI,E;;;;;;UCnLnB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;ACNA;;AAEA;;AAEA,4B;AACA,yB;AACA,yB;AACA,yB;;;AAG4B;AACF;AACY;AACD;;AAErC,cAAc,8CAAI;;;AAGlB;AACA;AACA,kBAAkB,2CAAK;AACvB,4BAA4B,8CAAI;AAChC;;;AAGA,iBAAiB,0CAAI;AACrB,uBAAuB,gDAAU,c","file":"app.js","sourcesContent":["class Controller {\r\n  constructor(model, view) {\r\n    this.model = model;\r\n    this.view = view;\r\n    \r\n\r\n    view.on('add', this.addTodo.bind(this));\r\n    view.on('toggle', this.toggleTodo.bind(this));\r\n    view.on('edit', this.editTodo.bind(this));\r\n    view.on('remove', this.removeTodo.bind(this));\r\n \r\n    view.show(model.state);\r\n  }\r\n\r\n\r\n\r\n  addTodo(title) {\r\n    //test \r\n    console.log(title);\r\n\r\n    const todo = this.model.addItem({\r\n      \r\n      id: Date.now(),\r\n      \r\n      title,\r\n      titlefromController: 'fromController',\r\n      completed: false,\r\n    });\r\n\r\n    this.view.addItem(todo);\r\n  }\r\n \r\n  toggleTodo( {id, completed}) {\r\n     const todo = this.model.updateItem(id, {completed});\r\n\r\n     this.view.toggleItem(todo);\r\n  }\r\n\r\n  editTodo({id, title}) {\r\n    const todo = this.model.updateItem(id, {title});\r\n\r\n    this.view.editItem(todo);\r\n  }\r\n\r\n  removeTodo(id) {\r\n    console.log(id);\r\n      this.model.removeItem(id);\r\n      this.view.removeItem(id);\r\n  }\r\n}\r\n\r\nexport default Controller;\r\n\r\n","function createElement(tag, props, ...children) {\r\n  const element = document.createElement(tag);\r\n\r\n  Object.keys(props).forEach(key => {\r\n    if(key.search('data') !== -1) {\r\n      element.setAttribute(key, props[key]);\r\n\r\n    }  else {\r\n\r\n      element[key] = props[key];\r\n    }\r\n  });\r\n  children.forEach(child => {\r\n    if (typeof child === 'string') {\r\n      child = document.createTextNode(child);\r\n    }\r\n\r\n    element.appendChild(child);\r\n  });\r\n\r\n  return element;\r\n\r\n}\r\n\r\nclass EventEmitter {\r\n  constructor() {\r\n    this.events = {};\r\n\r\n  }\r\n\r\n  on(type, callback) {\r\n    this.events[type] = this.events[type] || [];\r\n    this.events[type].push(callback);\r\n  }\r\n  emit(type, arg) {\r\n\r\n\r\n    if (this.events[type]) {\r\n\r\n\r\n      this.events[type].forEach(callback => callback(arg));\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\nfunction save(data) {\r\n  const string = JSON.stringify(data);\r\n\r\n  localStorage.setItem('todos', string);\r\n}\r\n\r\nfunction load() {\r\n  const string = localStorage.getItem('todos');\r\n  const data = JSON.parse(string);\r\n\r\n  return data;\r\n}\r\n\r\nexport {\r\n  createElement,\r\n  EventEmitter,\r\n  save,\r\n  load\r\n};","import {EventEmitter, save} from './helpers';\r\n\r\nclass Model extends EventEmitter {\r\n  constructor( state= []) {\r\n    super();\r\n\r\n    this.state = state;\r\n  } \r\n\r\n  getItem(id) { \r\n    return this.state.find(item => item.id == id);\r\n  }\r\n \r\n  addItem(item) {\r\n    \r\n\r\n    this.state.push(item);\r\n\r\n    this.emit('change', this.state);\r\n\r\n    // save(item);\r\n    \r\n    return item;\r\n  }\r\n\r\n  updateItem(id, data) {\r\n    const item = this.getItem(id);\r\n\r\n    Object.keys(data).forEach(prop => item[prop] = data[prop]);\r\n\r\n    this.emit('change', this.state);\r\n\r\n\r\n    \r\n\r\n\r\n    return item;\r\n  }\r\n\r\n  removeItem(id) {\r\n    const index = this.state.findIndex(item => item.id == id);\r\n\r\n    \r\n\r\n\r\n    if( index > -1) {\r\n      this.state.splice(index, 1);\r\n    }\r\n\r\n    this.emit('change', this.state);\r\n  }\r\n}\r\n\r\nexport default Model;","import {\r\n  createElement,\r\n  EventEmitter\r\n} from './helpers.js';\r\n\r\nclass View extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n\r\n    this.form = document.getElementById('todo-form');\r\n    this.input = document.getElementById('add-input');\r\n    this.list = document.getElementById('todo-list');\r\n\r\n    this.form.addEventListener('submit', this.handleAdd.bind(this));\r\n\r\n\r\n\r\n  }\r\n\r\n  createElement(todo) {\r\n    const checkbox = createElement('input', {\r\n      type: 'checkbox',\r\n      className: 'checkbox',\r\n      checked: todo.completed ? 'checked ' : ''\r\n    });\r\n    const label = createElement('label', {\r\n      className: 'title'\r\n    }, todo.title);\r\n    const editInput = createElement('input', {\r\n      type: 'text',\r\n      className: 'textfield'\r\n    });\r\n    const editButton = createElement('button', {\r\n      className: 'edit',\r\n    }, 'изменить');\r\n    const removeButton = createElement('button', {\r\n      className: 'remove',\r\n    }, 'удалить');\r\n    const item = createElement('li', {\r\n        className: `todo-item${todo.completed ? ' completed' : ' '}`,\r\n        'data-id': todo.id\r\n      },\r\n      checkbox, label, editInput, editButton, removeButton);\r\n\r\n    \r\n\r\n\r\n    return this.addEventListeners(item);\r\n  }\r\n\r\n  addEventListeners(listItem) {\r\n    \r\n    const checkbox = listItem.querySelector('.checkbox');\r\n    const editButton = listItem.querySelector('button.edit');\r\n    const removeButton = listItem.querySelector('button.remove');\r\n\r\n    checkbox.addEventListener('change', this.handleToggle.bind(this));\r\n    editButton.addEventListener('click', this.handleEdit.bind(this));\r\n    removeButton.addEventListener('click', this.handleRemove.bind(this));\r\n\r\n    return listItem;\r\n  }\r\n\r\n  handleAdd(event) {\r\n    event.preventDefault();\r\n\r\n    if (!this.input.value) {\r\n      return alert('необходимо ввести название задачи');\r\n    }\r\n\r\n    const value = this.input.value;\r\n\r\n    this.emit('add', value);\r\n  }\r\n\r\n  handleToggle({\r\n    target\r\n  }) {\r\n    const listItem = target.parentNode;\r\n    const id = listItem.getAttribute('data-id');\r\n    const completed = target.checked;\r\n\r\n    this.emit('toggle', {\r\n      id,\r\n      completed\r\n    });\r\n  }\r\n\r\n  handleEdit({\r\n    target\r\n  }) {\r\n    const listItem = target.parentNode;\r\n\r\n    const id = listItem.getAttribute('data-id');\r\n\r\n    const label = listItem.querySelector('.title');\r\n    const input = listItem.querySelector('.textfield');\r\n    const editButton = listItem.querySelector('button.edit');\r\n    const title = input.value;\r\n    const isEditing = listItem.classList.contains('editing');\r\n\r\n    if (isEditing) {\r\n      this.emit('edit', {\r\n        id,\r\n        title\r\n      });\r\n    } else {\r\n      input.value = label.textContent;\r\n      editButton.textContent = 'сохранить';\r\n      listItem.classList.add('editing');\r\n    }\r\n  }\r\n\r\n  handleRemove({\r\n    target\r\n  }) {\r\n    const listItem = target.parentNode;\r\n    const id = listItem.getAttribute('data-id');\r\n    this.emit('remove', id);\r\n\r\n  }\r\n\r\n  show(todos) {\r\n    todos.forEach(todo => {\r\n      const listItem = this.createElement(todo);\r\n\r\n      this.list.appendChild(listItem);\r\n    });\r\n  }\r\n\r\n\r\n  findListItem(id) {\r\n    return this.list.querySelector(`[data-id=\"${id}\"]`);\r\n  }\r\n\r\n  addItem(todo) {\r\n    const listItem = this.createElement(todo);\r\n\r\n    this.input.value = '';\r\n    this.list.appendChild(listItem);\r\n  }\r\n\r\n  toggleItem(todo) {\r\n    const listItem = this.findListItem(todo.id);\r\n    const checkbox = listItem.querySelector('.checkbox');\r\n\r\n    checkbox.checked = todo.completed;\r\n\r\n    if (todo.completed) {\r\n      listItem.classList.add('completed');\r\n    } else {\r\n      listItem.classList.remove('completed');\r\n    }\r\n\r\n  }\r\n\r\n  editItem(todo) {\r\n    const listItem = this.findListItem(todo.id);\r\n    const label = listItem.querySelector('.title');\r\n    const input = listItem.querySelector('.textfield');\r\n    const editButton = listItem.querySelector('button.edit');\r\n\r\n    label.textContent = todo.title;\r\n    editButton.textContent = 'изменить';\r\n    listItem.classList.remove('editing');\r\n\r\n  }\r\n\r\n  removeItem(id) {\r\n\r\n    // const listItem = this.findListItem(todo.id);\r\n    const listItem = this.findListItem(id);\r\n\r\n    this.list.removeChild(listItem);\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default View;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// const myModule  = require('./main');\r\n\r\n// const myModuleInstance = new myModule();\r\n\r\n// myModuleInstance.hello();  \r\n// myModuleInstance.by(); \r\n// myModuleInstance.by(); \r\n// myModuleInstance.by(); \r\n\r\n\r\nimport Model from './model';\r\nimport View from './view';\r\nimport Controller from './controller';\r\nimport {save, load} from './helpers';\r\n\r\nconst state = load();\r\n\r\n\r\n//test\r\n// const model = new Model();\r\nconst model = new Model(state || undefined);\r\nmodel.on('change', state => save(state));\r\n// model.on('change', state => console.log(state));\r\n\r\n\r\nconst view = new View();\r\nconst controller = new Controller(model, view);"],"sourceRoot":""}